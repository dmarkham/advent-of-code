// Code generated by "enumer -type=Kind --linecomment"; DO NOT EDIT.

package main

import (
	"fmt"
)

const _KindName = ".~M#FT+EG"

var _KindIndex = [...]uint8{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

func (i Kind) String() string {
	if i < 0 || i >= Kind(len(_KindIndex)-1) {
		return fmt.Sprintf("Kind(%d)", i)
	}
	return _KindName[_KindIndex[i]:_KindIndex[i+1]]
}

var _KindValues = []Kind{0, 1, 2, 3, 4, 5, 6, 7, 8}

var _KindNameToValueMap = map[string]Kind{
	_KindName[0:1]: 0,
	_KindName[1:2]: 1,
	_KindName[2:3]: 2,
	_KindName[3:4]: 3,
	_KindName[4:5]: 4,
	_KindName[5:6]: 5,
	_KindName[6:7]: 6,
	_KindName[7:8]: 7,
	_KindName[8:9]: 8,
}

var _KindNames = []string{
	_KindName[0:1],
	_KindName[1:2],
	_KindName[2:3],
	_KindName[3:4],
	_KindName[4:5],
	_KindName[5:6],
	_KindName[6:7],
	_KindName[7:8],
	_KindName[8:9],
}

// KindString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func KindString(s string) (Kind, error) {
	if val, ok := _KindNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Kind values", s)
}

// KindValues returns all values of the enum
func KindValues() []Kind {
	return _KindValues
}

// KindStrings returns a slice of all String values of the enum
func KindStrings() []string {
	strs := make([]string, len(_KindNames))
	copy(strs, _KindNames)
	return strs
}

// IsAKind returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Kind) IsAKind() bool {
	for _, v := range _KindValues {
		if i == v {
			return true
		}
	}
	return false
}
